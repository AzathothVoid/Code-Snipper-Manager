@inject IMediator Mediator
@inject IMapper AutoMapper
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@inherits MudComponentBase

<MudDialog MaxWidth="MaxWidth.Large">
    <DialogContent>
        <div class="dialog-header">
            <MudText Typo="Typo.h5">@(_isEdit ? "Edit Snippet" : "Create Snippet")</MudText>
            <MudText Typo="Typo.caption" Class="mud-text-secondary">Pro tip: add tags to make snippets later searchable.</MudText>
        </div>

        <MudForm @ref="_form" Model="Model" Class="mt-3">
            <MudGrid>
                <MudItem xs="12" md="8">
                    <MudTextField T="string" Label="Title" Value="@Model.Title" ValueChanged="@(v => Model.Title = v)" Required="true" />
                </MudItem>

                 <MudItem xs="12" md="4">
                    <MudSelect T="string" Label="Language" @bind-Value="Model.Language" 
                               Dense="true" Clearable="true"  Required="true" ToStringFunc="@(val => string.IsNullOrEmpty(val) || val == "text" ? "Select a language..." : val)">
                        @foreach (var lang in _languages)
                        {
                            <MudSelectItem T="string" Value="@lang">@lang</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>


                <MudItem xs="12">
                    <MudTextField T="string" Label="Tags" Value="@Model.Tags" ValueChanged="@(v => Model.Tags = v)" HelperText="comma-separated keywords" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField T="string" Label="Description" Value="@Model.Description" ValueChanged="@(v => Model.Description = v)" Lines="3" />
                </MudItem>

                <MudItem xs="12">
                    <MudText Typo="Typo.subtitle2" Class="mb-1">Code</MudText>
                    <MudTextField T="string" Value="@Model.Code" ValueChanged="@(v => Model.Code = v)" Lines="12" TextWrapping="TextWrapping.NoWrap" Placeholder="// paste your code here" />
                </MudItem>
            </MudGrid>

            <div class="mt-4 d-flex justify-end">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnSubmit">Save</MudButton>
                <MudButton Variant="Variant.Text" OnClick="Cancel" Class="ml-2">Cancel</MudButton>
            </div>
        </MudForm>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public bool IsEdit { get; set; } = false;
    [Parameter] public Guid SnippetId { get; set; }

    private readonly List<string> _languages = new()
    {
        "csharp",
        "javascript",
        "typescript",
        "python",
        "java",
        "cpp",
        "go",
        "php",
        "ruby",
        "rust",
        "other"
    };

    private MudForm? _form;
    private CreateSnippetDto Model = new();
    private bool _isEdit = false;

    protected override async Task OnInitializedAsync()
    {
        _isEdit = IsEdit;
        if (_isEdit && SnippetId != Guid.Empty)
        {
            var resp = await Mediator.Send(new GetSnippetDetailsQuery() { Id = SnippetId });
            if (resp == null || resp.Data == null) { Snackbar.Add("Snippet not found", Severity.Error); MudDialog.Cancel(); return; }
            var data = resp.Data;
            Model = new CreateSnippetDto
            {
                Title = data.Title,
                Description = data.Description,
                Language = data.Language,
                Code = data.Code,
                Tags = data.Tags,
                IsPublic = data.IsPublic,
                OwnerId = data.OwnerId
            };
        }
    }

    async Task OnSubmit()
    {
        await _form?.Validate();

        if (_isEdit && SnippetId != Guid.Empty)
        {
            var UpdateModel = AutoMapper.Map<UpdateSnippetDto>(Model);
            var cmd = new UpdateSnippetCommand() { Id = SnippetId, snippetDto = UpdateModel };
            var res = await Mediator.Send(cmd);
            if (!res.Success) { Snackbar.Add(res.Message ?? "Update failed", Severity.Error); return; }
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            var cmd = new CreateSnippetCommand() { snippetDto = Model };
            var res = await Mediator.Send(cmd);
            if (!res.Success) { 
                Snackbar.Add(res.Errors ?? "Create failed", Severity.Error); 
                return; 
            }
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    void Cancel() => MudDialog.Cancel();
}
