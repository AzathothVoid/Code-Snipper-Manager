@using System.Text.RegularExpressions
@inject NavigationManager Nav

<MudCard Class="h-100">
    <MudCardHeader>
        <MudText Typo="Typo.h6">@Snippet.Title</MudText>
        <MudChip T="string" Class="ml-2" Color="Color.Primary" Variant="Variant.Outlined">@Snippet.Language</MudChip>
    </MudCardHeader>
    <MudCardContent>
        <div style="max-height:120px; overflow:auto;">
            <pre><code class="language-@Snippet.Language">@SnippetPreview</code></pre>
        </div>
        <div class="mt-2">
            @if (!string.IsNullOrEmpty(Snippet.Tags))
            {
                foreach (var t in Snippet.Tags.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries))
                {
                    <MudChip Class="mr-1 mt-1" T="string" Color="Color.Info" Size="Size.Small">@t</MudChip>
                }
            }
        </div>
    </MudCardContent>
    <MudCardActions>
        <MudButton Size="Size.Small" Variant="Variant.Outlined" OnClick="@(()=>Nav.NavigateTo($"/snippets/{Snippet.Id}"))">Open</MudButton>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Public" Color="@(Snippet.IsPublic ? Color.Success : Color.Default)" OnClick="TogglePublic" />
    </MudCardActions>
</MudCard>

@code {
    [Parameter] public dynamic Snippet { get; set; } = null!; // accept domain DTO or SnippetDto
    [Parameter] public EventCallback<Guid> OnTogglePublic { get; set; }

    string SnippetPreview => 
        (Snippet?.Code as string) is string code ? (code.Length > 300 ? code.Substring(0, 300) + "…" : code) : "";

    async Task TogglePublic()
    {
        if (Snippet?.Id is Guid id)
            await OnTogglePublic.InvokeAsync(id);
    }
}

